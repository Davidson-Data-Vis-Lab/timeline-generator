}
box_plot <- function(bp_data){
# Plot weighted accuracy
ggboxplot(bp_data, x="metric", y="value",
color = "metric", palette=c("#00AFBB","#E7B800"),
ylab= "Value", xlab="Metric")
#print(bp_data)
}
participant_ID <- rep(1:SAMPLE_SIZE, times=2)
#Calculating weighted accuracy
ELR34_acc <- acc_sum(pilotDF, "ELR[34]")
#print("LR Accuracy Normality Check")
shapiro.test(ELR34_acc)
#Summing times
ELR34_time <- time_sum(pilotDF, "ELR[34]")
shapiro.test(ELR34_time)
#creating df
ELR34_df <- data.frame(
p_id = participant_ID,
metric = rep(c("time", "accuracy"), each=SAMPLE_SIZE),
value = c(ELR34_time,ELR34_acc)
)
#mean of the weighted accuracies
#acc_mean_ELR34 <- mean(ELR34_acc, na.rm = TRUE)
#print(acc_mean_ELR34)
#time_mean_ELR34 <- mean(unlist(ELR34_time), na.rm = TRUE)
#print(time_mean_ELR34)
# box blot distribution
#box_plot(ELR34_df)
#Calculating weighted accuracy
ERL34_acc <- acc_sum(pilotDF, "ERL[34]")
#print("RL Accuracy Normality Check")
shapiro.test(ERL34_acc)
#Summing times
ERL34_time <- time_sum(pilotDF, "ERL[34]")
#print("RL Time Normality Check")
shapiro.test(ERL34_time)
#creating df for plot
ERL34_df <- data.frame(
p_id = participant_ID,
metric = rep(c("time", "accuracy"), each=SAMPLE_SIZE),
value = c(ERL34_time, ERL34_acc)
)
# box blot distribution
#box_plot(ERL34_df)
#Calculating weighted accuracy
ETB34_acc <- acc_sum(pilotDF, "ETB[34]")
#print("TB Accuracy Normality Check")
shapiro.test(ETB34_acc)
#Summing times
ETB34_time <- time_sum(pilotDF, "ETB[34]")
#print("TB Time Normality Check")
shapiro.test(ETB34_time)
#creating df for plot
ETB34_df <- data.frame(
p_id = participant_ID,
metric = rep(c("time", "accuracy"), each=SAMPLE_SIZE),
value = c(ETB34_time, ETB34_acc)
)
# box blot distribution
#box_plot(ERL34_df)
# Merge the data frames
df_ENG <- ELR34_df %>%
rename(value_LR = value) %>%
full_join(ERL34_df %>% rename(value_RL = value), by = c("p_id", "metric")) %>%
full_join(ETB34_df %>% rename(value_TB = value), by = c("p_id", "metric"))
# display merged data frame
head(df_ENG)
#t-test: ELR vs. ERL accuracy
test_elr_erl_acc <- t.test(
df_ENG %>% filter(metric=="accuracy") %>% pull(value_LR),
df_ENG %>% filter(metric=="accuracy") %>% pull(value_RL),
paired = TRUE
)
print(test_elr_erl_acc)
#t-test: ETB vs. ELR accuracy
test_etb_elr_acc <- t.test(
df_ENG %>% filter(metric=="accuracy") %>% pull(value_LR),
df_ENG %>% filter(metric=="accuracy") %>% pull(value_TB),
paired = TRUE
)
print(test_etb_elr_acc)
#t-test: ERL vs. ETB accuracy
test_erl_etb_acc <- t.test(
df_ENG %>% filter(metric=="accuracy") %>% pull(value_RL),
df_ENG %>% filter(metric=="accuracy") %>% pull(value_TB),
paired = TRUE
)
print(test_erl_etb_acc)
#t-test: ELR vs. ERL time
test_elr_erl_time <- t.test(
df_ENG %>% filter(metric=="time") %>% pull(value_LR),
df_ENG %>% filter(metric=="time") %>% pull(value_RL),
paired = TRUE
)
print(test_elr_erl_time)
#t-test: ETB vs. ELR time
test_etb_elr_time <- t.test(
df_ENG %>% filter(metric=="time") %>% pull(value_LR),
df_ENG %>% filter(metric=="time") %>% pull(value_TB),
paired = TRUE
)
print(test_etb_elr_time)
#t-test: ERL vs. ETB time
test_erl_etb_time <- t.test(
df_ENG %>% filter(metric=="time") %>% pull(value_RL),
df_ENG %>% filter(metric=="time") %>% pull(value_TB),
paired = TRUE
)
print(test_erl_etb_time)
View(ELR34_df)
View(df_ENG)
#means
paste("LR Time Mean:",mean(ELR34_time, na.rm = TRUE))
paste("RL Time Mean:",mean(ERL34_time, na.rm = TRUE))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
gc()
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
# Defining global variables
MAX_SCORE <- 12
#variables subject to change as we get more responses:
SAMPLE_SIZE <- 25 #no. of responses that answer the English universal questions
eng_primary_size <- 11 #no. of responses that answer with English as primary lang
urdu_primary_size <- 10 #no. of responses that answer with Urdu as primary lang
arb_primary_size <- 6 #no. of responses that answer with Arabic as primary lang
# Function to process accuracy data
# RETURNS weighted accuracy
acc_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6]$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# List to store sums of each index across columns
sums <- numeric(length = length(data_numeric[[1]]))
# Calculate and store sums of each index across columns
for (i in seq_along(data_numeric[[1]])) {
# Sum ignoring NA values
sums[i] <- sum(unlist(lapply(data_numeric, function(x) x[i])), na.rm = TRUE)
}
# Weighted accuracy for each participant
weighted_accuracy <- sums / MAX_SCORE
return(weighted_accuracy)
}
# Function to process time data
time_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6] Time_Page Submit$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# List to store sums of each index across columns
sums <- numeric(length = length(data_numeric[[1]]))
# Calculate and store sums of each index across columns
for (i in seq_along(data_numeric[[1]])) {
# Sum ignoring NA values
sums[i] <- sum(unlist(lapply(data_numeric, function(x) x[i])), na.rm = TRUE)
}
return(sums)
}
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
# Defining global variables
MAX_SCORE <- 12
#variables subject to change as we get more responses:
SAMPLE_SIZE <- 25 #no. of responses that answer the English universal questions
eng_primary_size <- 11 #no. of responses that answer with English as primary lang
urdu_primary_size <- 10 #no. of responses that answer with Urdu as primary lang
arb_primary_size <- 6 #no. of responses that answer with Arabic as primary lang
# Function to process accuracy data
# RETURNS weighted accuracy
acc_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6]$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# List to store sums of each index across columns
sums <- numeric(length = length(data_numeric[[1]]))
# Calculate and store sums of each index across columns
for (i in seq_along(data_numeric[[1]])) {
# Sum ignoring NA values
sums[i] <- sum(unlist(lapply(data_numeric, function(x) x[i])), na.rm = TRUE)
}
# Weighted accuracy for each participant
weighted_accuracy <- sums / MAX_SCORE
return(weighted_accuracy)
}
# Function to process time data
time_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6] Time_Page Submit$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# List to store sums of each index across columns
sums <- numeric(length = length(data_numeric[[1]]))
# Calculate and store sums of each index across columns
for (i in seq_along(data_numeric[[1]])) {
# Sum ignoring NA values
sums[i] <- sum(unlist(lapply(data_numeric, function(x) x[i])), na.rm = TRUE)
}
return(sums)
}
box_plot <- function(bp_data){
# Plot weighted accuracy
ggboxplot(bp_data, x="metric", y="value",
color = "metric", palette=c("#00AFBB","#E7B800"),
ylab= "Value", xlab="Metric")
#print(bp_data)
}
bar_plot <- function(data, title){
ggplot(data, aes(x = orientation, y = metric, fill = orientation)) +
geom_bar(stat = "identity") +
labs(title = title, x = "Orientation", y = "Mean Value") +
theme_minimal() +
scale_fill_brewer(palette="Accent")
}
participant_ID <- rep(1:eng_primary_size, times=2)
#TODO: shift to where global variables are defined above.
#Calculating weighted accuracy
ELR34_acc <- acc_sum(pilotDF, "ELR[34]")
#Summing times
ELR34_time <- time_sum(pilotDF, "ELR[34]")
print(ELR34_acc)
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
# Defining global variables
MAX_SCORE <- 12
#variables subject to change as we get more responses:
SAMPLE_SIZE <- 25 #no. of responses that answer the English universal questions
eng_primary_size <- 11 #no. of responses that answer with English as primary lang
urdu_primary_size <- 10 #no. of responses that answer with Urdu as primary lang
arb_primary_size <- 6 #no. of responses that answer with Arabic as primary lang
# Function to process accuracy data
# RETURNS weighted accuracy
acc_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6]$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# Combine the lists into a data frame to facilitate row-wise operations
data_numeric_df <- as.data.frame(data_numeric)
# Filter out rows where all values are NA
data_filtered <- data_numeric_df[rowSums(is.na(data_numeric_df)) != ncol(data_numeric_df), ]
# List to store sums of each index across columns
sums <- numeric(nrow(data_filtered))
# Calculate and store sums of each index across columns
for (i in seq_along(sums)) {
sums[i] <- sum(data_filtered[i, ], na.rm = TRUE)
}
# Weighted accuracy for each participant
weighted_accuracy <- sums / MAX_SCORE
return(weighted_accuracy)
}
# Function to process time data
time_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6] Time_Page Submit$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# List to store sums of each index across columns
sums <- numeric(length = length(data_numeric[[1]]))
# Calculate and store sums of each index across columns
for (i in seq_along(data_numeric[[1]])) {
# Sum ignoring NA values
sums[i] <- sum(unlist(lapply(data_numeric, function(x) x[i])), na.rm = TRUE)
}
return(sums)
}
box_plot <- function(bp_data){
# Plot weighted accuracy
ggboxplot(bp_data, x="metric", y="value",
color = "metric", palette=c("#00AFBB","#E7B800"),
ylab= "Value", xlab="Metric")
#print(bp_data)
}
bar_plot <- function(data, title){
ggplot(data, aes(x = orientation, y = metric, fill = orientation)) +
geom_bar(stat = "identity") +
labs(title = title, x = "Orientation", y = "Mean Value") +
theme_minimal() +
scale_fill_brewer(palette="Accent")
}
participant_ID <- rep(1:eng_primary_size, times=2)
#TODO: shift to where global variables are defined above.
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
# Defining global variables
MAX_SCORE <- 12
#variables subject to change as we get more responses:
SAMPLE_SIZE <- 25 #no. of responses that answer the English universal questions
eng_primary_size <- 11 #no. of responses that answer with English as primary lang
urdu_primary_size <- 10 #no. of responses that answer with Urdu as primary lang
arb_primary_size <- 6 #no. of responses that answer with Arabic as primary lang
# Function to process accuracy data
# RETURNS weighted accuracy
acc_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6]$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# Combine the lists into a data frame to facilitate row-wise operations
data_numeric_df <- as.data.frame(data_numeric)
# Filter out rows where all values are NA
data_filtered <- data_numeric_df[rowSums(is.na(data_numeric_df)) != ncol(data_numeric_df), ]
# List to store sums of each index across columns
sums <- numeric(nrow(data_filtered))
# Calculate and store sums of each index across columns
for (i in seq_along(sums)) {
sums[i] <- sum(data_filtered[i, ], na.rm = TRUE)
}
# Weighted accuracy for each participant
weighted_accuracy <- sums / MAX_SCORE
return(weighted_accuracy)
}
# Function to process time data
time_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6] Time_Page Submit$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# List to store sums of each index across columns
sums <- numeric(length = length(data_numeric[[1]]))
# Calculate and store sums of each index across columns
for (i in seq_along(data_numeric[[1]])) {
# Sum ignoring NA values
sums[i] <- sum(unlist(lapply(data_numeric, function(x) x[i])), na.rm = TRUE)
}
return(sums)
}
box_plot <- function(bp_data){
# Plot weighted accuracy
ggboxplot(bp_data, x="metric", y="value",
color = "metric", palette=c("#00AFBB","#E7B800"),
ylab= "Value", xlab="Metric")
#print(bp_data)
}
bar_plot <- function(data, title){
ggplot(data, aes(x = orientation, y = metric, fill = orientation)) +
geom_bar(stat = "identity") +
labs(title = title, x = "Orientation", y = "Mean Value") +
theme_minimal() +
scale_fill_brewer(palette="Accent")
}
participant_ID <- rep(1:eng_primary_size, times=2)
#TODO: shift to where global variables are defined above.
#Calculating weighted accuracy
ELR34_acc <- acc_sum(pilotDF, "ELR[34]")
#print("LR Accuracy Normality Check")
shapiro.test(ELR34_acc)
#Summing times
ELR34_time <- time_sum(pilotDF, "ELR[34]")
shapiro.test(ELR34_time)
#creating df
ELR34_df <- data.frame(
p_id = participant_ID,
metric = rep(c("time", "accuracy"), each=eng_primary_size),
value = c(ELR34_time,ELR34_acc)
)
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(readxl)
library(dplyr)
library(purrr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Reading data from data file
pilotDF <- read_excel("./data/pilot_analysis.xlsx")
# Defining global variables
MAX_SCORE <- 12
#variables subject to change as we get more responses:
SAMPLE_SIZE <- 25 #no. of responses that answer the English universal questions
eng_primary_size <- 11 #no. of responses that answer with English as primary lang
urdu_primary_size <- 10 #no. of responses that answer with Urdu as primary lang
arb_primary_size <- 6 #no. of responses that answer with Arabic as primary lang
# Function to process accuracy data
# RETURNS weighted accuracy
acc_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6]$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# Combine the lists into a data frame to facilitate row-wise operations
data_numeric_df <- as.data.frame(data_numeric)
# Filter out rows where all values are NA
data_filtered <- data_numeric_df[rowSums(is.na(data_numeric_df)) != ncol(data_numeric_df), ]
# List to store sums of each index across columns
sums <- numeric(nrow(data_filtered))
# Calculate and store sums of each index across columns
for (i in seq_along(sums)) {
sums[i] <- sum(data_filtered[i, ], na.rm = TRUE)
}
# Weighted accuracy for each participant
weighted_accuracy <- sums / MAX_SCORE
return(weighted_accuracy)
}
# Function to process time data
time_sum <- function(df, prefix) {
# Select specific columns
selected_columns <- df %>%
select(matches(paste0("^", prefix, " - Q[1-6] Time_Page Submit$")))
# Converting character vectors to numeric
data_numeric <- lapply(selected_columns, function(column) as.numeric(column))
# Combine the lists into a data frame to facilitate row-wise operations
data_numeric_df <- as.data.frame(data_numeric)
# Filter out rows where all values are NA
data_filtered <- data_numeric_df[rowSums(is.na(data_numeric_df)) != ncol(data_numeric_df), ]
# List to store sums of each index across columns
sums <- numeric(nrow(data_filtered))
# Calculate and store sums of each index across columns
for (i in seq_along(sums)) {
sums[i] <- sum(data_filtered[i, ], na.rm = TRUE)
}
return(sums)
}
box_plot <- function(bp_data){
# Plot weighted accuracy
ggboxplot(bp_data, x="metric", y="value",
color = "metric", palette=c("#00AFBB","#E7B800"),
ylab= "Value", xlab="Metric")
#print(bp_data)
}
bar_plot <- function(data, title){
ggplot(data, aes(x = orientation, y = metric, fill = orientation)) +
geom_bar(stat = "identity") +
labs(title = title, x = "Orientation", y = "Mean Value") +
theme_minimal() +
scale_fill_brewer(palette="Accent")
}
participant_ID <- rep(1:eng_primary_size, times=2)
#TODO: shift to where global variables are defined above.
#Calculating weighted accuracy
ELR34_acc <- acc_sum(pilotDF, "ELR[34]")
#print("LR Accuracy Normality Check")
shapiro.test(ELR34_acc)
#Summing times
ELR34_time <- time_sum(pilotDF, "ELR[34]")
shapiro.test(ELR34_time)
#creating df
ELR34_df <- data.frame(
p_id = participant_ID,
metric = rep(c("time", "accuracy"), each=eng_primary_size),
value = c(ELR34_time,ELR34_acc)
)
# box blot distribution
#box_plot(ELR34_df)
